{"version":3,"sources":["components/menu.js","components/about.js","components/project.js","components/projectContainer.js","App.js","serviceWorker.js","index.js"],"names":["Menu","className","id","href","About","src","target","Project","props","project","title","link","img","description","heroku","renderHeroku","ProjectContainer","state","projects","renderProjects","map","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4LAeeA,G,YAbF,WACX,OAEI,yBAAKC,UAAU,QACb,wBAAIC,GAAG,QAAP,cACA,wBAAIA,GAAG,OACL,4BAAI,uBAAGC,KAAK,UAAR,UACJ,4BAAI,uBAAGA,KAAK,qBAAR,kBCUCC,EAjBD,WACZ,OAEI,yBAAKF,GAAG,SACN,qCACA,yBAAKA,GAAG,WAAWG,IAAI,0EACvB,yBAAKH,GAAG,OACN,6YACA,0PAEF,uCACA,uBAAGI,OAAO,SAASH,KAAK,4BAAxB,IAAoD,yBAAKF,UAAU,OAAOI,IAAI,qEAA9E,KACA,uBAAGC,OAAO,SAASH,KAAK,kCAAxB,IAA0D,yBAAKF,UAAU,OAAOI,IAAI,oEAApF,O,mCCQOE,EApBC,SAACC,GAQf,OACI,yBAAKP,UAAU,WACb,gCAAMO,EAAMC,QAAQC,MAApB,KACA,uBAAGJ,OAAO,SAASH,KAAMK,EAAMC,QAAQE,MAAM,yBAAKV,UAAU,WAAWI,IAAKG,EAAMC,QAAQG,OAC1F,2BAAIJ,EAAMC,QAAQI,YAAlB,KACA,uBAAGP,OAAO,SAASH,KAAMK,EAAMC,QAAQE,MAAM,yBAAKV,UAAU,OAAOI,IAAI,qEAAvE,KAXN,WACE,GAAIG,EAAMC,QAAQK,OAChB,OAAO,uBAAGX,KAAMK,EAAMC,QAAQK,OAAQR,OAAO,UAAS,yBAAKL,UAAU,OAAOI,IAAI,iEAAzE,KAUJU,KCiCMC,E,2MA5CbC,MAAQ,CACNC,SAAU,CACR,CACER,MAAO,aACPC,KAAM,gDACNC,IAAK,6FACLC,YAAa,yEAEf,CACEH,MAAO,WACPC,KAAM,6CACNG,OAAQ,sCACRF,IAAK,6FACLC,YAAa,+EAEf,CACEH,MAAO,WACPC,KAAM,8DACNG,OAAQ,0CACRF,IAAK,6FACLC,YAAa,2D,EAKnBM,eAAiB,WACd,OAAO,EAAKF,MAAMC,SAASE,KAAI,SAACX,GAC9B,OAAO,kBAAC,EAAD,CAASA,QAASA,Q,wEAM5B,OACE,yBAAKP,GAAG,oBACN,gDACA,6BACCmB,KAAKF,sB,GAvCiBG,aCkBhBC,MAff,WACE,OACE,yBAAKtB,UAAU,OACb,4BAAQA,UAAU,cAChB,kBAAC,EAAD,OAGF,8BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,SCHYuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.298ae507.chunk.js","sourcesContent":["import React from 'react'\n\nconst Menu = () => {\n  return (\n\n      <div className=\"menu\">\n        <h1 id=\"logo\">ERIN GREEN</h1>\n        <ul id=\"nav\">\n          <li><a href=\"#about\">ABOUT</a></li>\n          <li><a href=\"#projectContainer\">PORTFOLIO</a></li>\n        </ul>\n      </div>\n  );\n};\n\nexport default Menu;\n","import React from 'react'\n\nconst About = () => {\n  return (\n\n      <div id=\"about\">\n        <h2>ABOUT</h2>\n        <img id=\"headshot\" src=\"https://s3.us-east-2.amazonaws.com/eyg.portfolio/outdoor_headshot.jpg\"/>\n        <div id=\"bio\">\n          <p> Erin Green is a full stack web developer with experience in React, Redux, Ruby on Rails, and JavaScript with over five years of experience in nonprofit administration and fundraising. Green has experience with project management, graphic design, relationship management, and brings a unique design perspective to an engineering team from her background in the arts.</p>\n          <p> Green received a BA in Art History from Tulane University, an MA in Arts Administration from the Savannah College of Art and Design, and completed an immersive software engineering course through the Flatiron School. </p>\n        </div>\n        <h4>CONTACT</h4>\n        <a target=\"_blank\" href=\"www.github.com/egreen724\"> <img className=\"icon\" src=\"https://s3.us-east-2.amazonaws.com/eyg.portfolio/github+icon.jpg\"/> </a>\n        <a target=\"_blank\" href='mailto: erin.y.green@gmail.com'> <img className=\"icon\" src=\"https://s3.us-east-2.amazonaws.com/eyg.portfolio/email+icon.png\"/> </a>\n      </div>\n  );\n};\n\nexport default About;\n","import React from 'react'\n\nconst Project = (props) => {\n\n  function renderHeroku(){\n    if (props.project.heroku) {\n      return <a href={props.project.heroku} target=\"_blank\"><img className=\"icon\" src=\"https://s3.us-east-2.amazonaws.com/eyg.portfolio/export.jpeg\" /> </a>\n    }\n  }\n\n  return (\n      <div className=\"project\">\n        <h3> {props.project.title} </h3>\n        <a target=\"_blank\" href={props.project.link}><img className='appImage' src={props.project.img} /></a>\n        <p>{props.project.description} </p>\n        <a target=\"_blank\" href={props.project.link}><img className=\"icon\" src=\"https://s3.us-east-2.amazonaws.com/eyg.portfolio/github+icon.jpg\" /> </a>\n        {renderHeroku()}\n\n      </div>\n  );\n};\n\nexport default Project;\n","import React, { Component } from 'react'\nimport Project from './project.js'\n\nclass ProjectContainer extends Component {\n\n  state = {\n    projects: [\n      {\n        title: 'GeoCulture',\n        link: \"https://github.com/egreen724/geoculture_react\",\n        img: \"https://s3.us-east-2.amazonaws.com/eyg.portfolio/Screen+Shot+2020-03-12+at+12.14.04+AM.png\",\n        description: 'Web app built on a Ruby on Rails backend with a React/Redux frontend.'\n      },\n      {\n        title: 'Roam App',\n        link: \"https://github.com/egreen724/rails-project\",\n        heroku: \"https://roamrailsapp.herokuapp.com/\",\n        img: \"https://s3.us-east-2.amazonaws.com/eyg.portfolio/Screen+Shot+2020-03-11+at+11.07.30+PM.png\",\n        description: 'A Ruby on Rails app to track your outdoor adventures and plan future trips.'\n      },\n      {\n        title: 'ListenUp',\n        link: \"https://github.com/egreen724/podcast_tracker_SinatraProject\",\n        heroku: 'https://listenup-sinatra.herokuapp.com/',\n        img: \"https://s3.us-east-2.amazonaws.com/eyg.portfolio/Screen+Shot+2020-03-12+at+12.20.21+AM.png\",\n        description: 'A Sinatra-based web app for discovering new podcasts.'\n      }\n    ]\n  }\n\n  renderProjects = () => {\n     return this.state.projects.map((project) => {\n       return <Project project={project} />\n     }\n    )\n  }\n\n  render() {\n    return (\n      <div id=\"projectContainer\">\n        <h2>SELECT PORTFOLIO</h2>\n        <br></br>\n        {this.renderProjects()}\n      </div>\n    )\n  }\n\n}\n\nexport default ProjectContainer;\n","import React from 'react';\nimport './App.css';\nimport Menu from './components/menu.js'\nimport About from './components/about.js'\nimport ProjectContainer from './components/projectContainer.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Menu />\n      </header>\n\n      <body>\n        <ProjectContainer />\n        <About />\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}